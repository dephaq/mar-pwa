openapi: 3.0.0
info:
  title: MAR API
  version: "1.0.0"

paths:
  /api/subscriptions:
    post:
      operationId: createSubscription
      summary: Create subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionDto'
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDto'

  /api/subscriptions/{id}:
    delete:
      operationId: deleteSubscription
      summary: Remove subscription
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Deleted

  /api/notify:
    post:
      operationId: notifyNow
      summary: Send notification immediately
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyDto'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent:
                    type: integer

  /api/campaigns:
    get:
      operationId: listCampaigns
      summary: List campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignDto'
    post:
      operationId: createCampaign
      summary: Create campaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignCreateDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDto'

  /api/campaigns/{id}:
    get:
      operationId: getCampaign
      summary: Get campaign
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDto'
    post:
      operationId: launchCampaign
      summary: Launch campaign
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  launched:
                    type: integer
    put:
      operationId: stopCampaign
      summary: Stop campaign
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Stopped
          content:
            application/json:
              schema:
                type: object
                properties:
                  stopped:
                    type: boolean

  /api/campaigns/{id}/events:
    get:
      operationId: listCampaignEvents
      summary: List campaign events
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationEventDto'

  /api/studies:
    get:
      operationId: listStudies
      summary: List studies
      responses:
        '200':
          description: Array of studies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudyDto'
    post:
      operationId: createStudy
      summary: Create study
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudyDto'
      responses:
        '201':
          description: Study created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyDto'

  /api/studies/{id}:
    get:
      operationId: getStudy
      summary: Get study by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Study
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyDto'
    put:
      operationId: updateStudy
      summary: Update study
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudyDto'
      responses:
        '200':
          description: Study
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyDto'

  /api/invitations/launch:
    post:
      operationId: launchInvitations
      summary: Launch invitations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchInvitationDto'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaunchInvitationResponseDto'

  /api/export/invitations.csv:
    get:
      operationId: exportInvitations
      summary: Export invitations CSV
      responses:
        '200':
          description: CSV
          content:
            text/csv:
              schema:
                type: string
                format: binary

  /api/audience:
    get:
      operationId: searchAudience
      summary: Search audience
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: gender
          schema: { type: string }
        - in: query
          name: prescreenQuestion
          schema: { type: string }
        - in: query
          name: prescreenAnswer
          schema: { type: string }
        - in: query
          name: segmentId
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AudienceDto'

  /api/audience/export.csv:
    get:
      operationId: exportAudience
      summary: Export audience CSV
      parameters:
        - in: query
          name: segmentId
          schema: { type: string, nullable: true }
      responses:
        '200':
          description: CSV
          content:
            text/csv:
              schema:
                type: string
                format: binary

  /api/audience/segments:
    get:
      operationId: listSegments
      summary: List saved segments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SegmentDto'
    post:
      operationId: createSegment
      summary: Create new segment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSegmentDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentDto'

  /api/profile:
    get:
      operationId: getProfile
      summary: Get profile
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
    put:
      operationId: updateProfile
      summary: Update profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'

  /api/prescreen:
    get:
      operationId: getPrescreen
      summary: Get prescreen blocks
      responses:
        '200':
          description: Array of prescreen blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrescreenBlockDto'

  /api/prescreen/{id}:
    put:
      operationId: updatePrescreenBlock
      summary: Update prescreen block
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePrescreenBlockDto'
      responses:
        '200':
          description: Prescreen block
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrescreenBlockDto'

components:
  schemas:
    SubscriptionKeysDto:
      type: object
      properties:
        p256dh: { type: string }
        auth: { type: string }
    CreateSubscriptionDto:
      type: object
      properties:
        endpoint: { type: string }
        keys:
          $ref: '#/components/schemas/SubscriptionKeysDto'
    SubscriptionDto:
      allOf:
        - $ref: '#/components/schemas/CreateSubscriptionDto'
        - type: object
          properties:
            id: { type: string }

    NotifyDto:
      type: object
      properties:
        segment: { type: object, additionalProperties: true }
        title: { type: string }
        body: { type: string }
        url: { type: string }
        ttl: { type: integer }

    CampaignMessageDto:
      type: object
      required: [title, body]
      properties:
        title: { type: string }
        body: { type: string }
        url: { type: string }

    CampaignCreateDto:
      type: object
      required: [name, message]
      properties:
        name: { type: string }
        studyId: { type: string }
        segment: { type: object, additionalProperties: true }
        throttlePerMinute: { type: integer }
        message:
          $ref: '#/components/schemas/CampaignMessageDto'

    CampaignDto:
      allOf:
        - $ref: '#/components/schemas/CampaignCreateDto'
        - type: object
          required: [id, createdAt, status]
          properties:
            id: { type: string }
            createdAt:
              type: string
              format: date-time
            status:
              type: string
              enum: [draft, launched, stopped]

    NotificationEventDto:
      type: object
      required: [id, campaignId, status, createdAt]
      properties:
        id: { type: string }
        campaignId: { type: string }
        subscriptionId: { type: string }
        status:
          type: string
          enum: [sent, failed]
        error: { type: string }
        createdAt:
          type: string
          format: date-time

    CreateStudyDto:
      type: object
      required: [title, link]
      properties:
        title: { type: string }
        link: { type: string }
        description: { type: string }
        durationMin: { type: integer }
        rewardCents: { type: integer }
        deadlineAt:
          type: string
          format: date-time
        targeting:
          type: object
          additionalProperties: true
        quotas:
          type: object
          additionalProperties: true

    StudyDto:
      allOf:
        - $ref: '#/components/schemas/CreateStudyDto'
        - type: object
          required: [id]
          properties:
            id: { type: string }

    LaunchInvitationDto:
      type: object
      properties:
        studyId: { type: string }
        segment: { type: string }
        quota: { type: integer }

    LaunchInvitationResponseDto:
      type: object
      properties:
        launched: { type: integer }

    AudienceFilterDto:
      type: object
      properties:
        q: { type: string }
        city: { type: string }
        gender: { type: string }
        prescreenQuestion: { type: string }
        prescreenAnswer: { type: string }
        segmentId: { type: string }

    AudienceDto:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        name: { type: string }
        age: { type: integer }
        gender: { type: string }
        city: { type: string }

    CreateSegmentDto:
      type: object
      properties:
        name: { type: string }
        filter:
          $ref: '#/components/schemas/AudienceFilterDto'

    SegmentDto:
      allOf:
        - $ref: '#/components/schemas/CreateSegmentDto'
        - type: object
          properties:
            id: { type: string }

    ProfileDto:
      type: object
      properties:
        name: { type: string }
        age: { type: integer }
        gender: { type: string }
        city: { type: string }
        profession: { type: string }
        contacts: { type: string }

    UpdateProfileDto:
      type: object
      properties:
        name: { type: string }
        age: { type: integer }
        gender: { type: string }
        city: { type: string }
        profession: { type: string }
        contacts: { type: string }

    PrescreenBlockDto:
      type: object
      properties:
        id: { type: string }
        question: { type: string }
        answer: { type: string }

    UpdatePrescreenBlockDto:
      type: object
      properties:
        answer: { type: string }
